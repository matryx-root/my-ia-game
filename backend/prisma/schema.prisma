generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RolUsuario {
  alumno
  docente
  admin
}


model Colegio {
  id       Int      @id @default(autoincrement())
  nombre   String
  nivel    String   
  usuarios Usuario[]
}


model Usuario {
  id            Int                    @id @default(autoincrement())
  nombre        String
  email         String                 @unique
  password      String
  rol RolUsuario @default(alumno)
  edad          Int?
  celular       String?
  colegio       Colegio?               @relation(fields: [colegioId], references: [id])
  colegioId     Int?
  progreso      ProgresoUsuario[]
  logsIngreso   LogIngreso[]
  logsJuego     LogJuego[]
  mensajes      MensajeSoporte[]
  configuracion ConfiguracionUsuario?
  logros        Achievement[]
  errores       LogError[]
}

model Juego {
  id          Int                 @id @default(autoincrement())
  nombre      String
  descripcion String?
  logsJuego   LogJuego[]
  progreso    ProgresoUsuario[]
  logros      Achievement[]
  errores     LogError[]
  archivo     String?
}

model LogIngreso {
  id         Int      @id @default(autoincrement())
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  Int
  fechaHora  DateTime @default(now())
  ip         String?
  userAgent  String?
}

model LogJuego {
  id         Int      @id @default(autoincrement())
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  Int
  juego      Juego    @relation(fields: [juegoId], references: [id], onDelete: Cascade)
  juegoId    Int
  fechaHora  DateTime @default(now())
  accion     String?  
  detalle    String?
  duracion   Int?
}

model LogError {
  id         Int      @id @default(autoincrement())
  usuario    Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  Int?
  juego      Juego?   @relation(fields: [juegoId], references: [id], onDelete: Cascade)
  juegoId    Int?
  fechaHora  DateTime @default(now())
  mensaje    String
  detalle    String?
}

model MensajeSoporte {
  id         Int      @id @default(autoincrement())
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  Int
  mensaje    String
  fechaHora  DateTime @default(now())
  estado     String   @default("pendiente")
  respuesta  String?
  leido      Boolean? @default(false) 
}


model ProgresoUsuario {
  id                  Int      @id @default(autoincrement())
  usuario             Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId           Int
  juego               Juego    @relation(fields: [juegoId], references: [id], onDelete: Cascade)
  juegoId             Int
  avance              Int?     
  completado          Boolean? 
  aciertos            Int?     
  desaciertos         Int?     
  fechaActualizacion  DateTime @default(now())
}

model Achievement {
  id          Int      @id @default(autoincrement())
  usuario     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId   Int
  juego       Juego?   @relation(fields: [juegoId], references: [id], onDelete: Cascade)
  juegoId     Int?
  nombre      String
  descripcion String?
  fechaHora   DateTime @default(now())
}

model ConfiguracionUsuario {
  id              Int      @id @default(autoincrement())
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId       Int      @unique
  tema            String?
  idioma          String?
  sonido          Boolean?
  notificaciones  Boolean?
}
